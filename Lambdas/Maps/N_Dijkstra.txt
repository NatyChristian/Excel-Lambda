Nom : N_Dijkstra
Formule : 
LAMBDA(Data,Source,[Target],[Paths], LET(
   _City1, DROP(CHOOSECOLS(Data, 1), 1),
   _City2, DROP(CHOOSECOLS(Data, 2), 1),
   _Dista, DROP(CHOOSECOLS(Data, -1), 1),
   _UniqueCities, UNIQUE(VSTACK(_City1, _City2)),
   _SCity, Source,
   _SDist, 0,
   _SortCities, MAP(_City1, _City2, LAMBDA(a,v, CONCAT(SORT(VSTACK(a, v))))),
   _StartVisited, SEQUENCE(ROWS(_UniqueCities), , 0, 0),
   _StartSaved, SEQUENCE(ROWS(_UniqueCities), , 10 ^ 9, 0),
   _StartVisitedCity, IF(_StartSaved, ""),
   _Rec, LAMBDA(Me,City,Distance,Saved,Visited,VisitedCity, LET(
      NVisited, Visited + N(_UniqueCities = City),
      Cities, MAP(_UniqueCities, LAMBDA(a, CONCAT(SORT(VSTACK(a, City))))),
      Dista, XLOOKUP(Cities, _SortCities, _Dista, 10 ^ 6),
      NSaved, MAP(Saved, Dista + Distance, MIN),
      NVisitedCity, IF(NSaved < Saved, City, VisitedCity),
      IF(
         PRODUCT(NVisited) = 1,
         VSTACK(
            HSTACK("From", "To", "Distances", "Closest Nodes"),
            IFERROR(HSTACK(Source, _UniqueCities, NSaved, NVisitedCity), Source)
         ),
         LET(
            NDistance, MIN(FILTER(NSaved, NVisited = 0)),
            NCity, XLOOKUP(
               NDistance,
               FILTER(NSaved, 1 - NVisited),
               FILTER(_UniqueCities, 1 - NVisited)
            ),
            Me(Me, NCity, NDistance, NSaved, NVisited, NVisitedCity)
         )
      )
   )),
   _application, _Rec(
      _Rec,
      _SCity,
      _SDist,
      _StartSaved,
      _StartVisited,
      _StartVisitedCity
   ),
   _out,IF(ISOMITTED(Paths),
           IF(ISOMITTED(Target),
              _application,
              XLOOKUP(Target,CHOOSECOLS(_application,2),CHOOSECOLS(_application,3))),
           IF(ISOMITTED(Target),
              "Veuillez renseigner le target please!!!",
              LET(
                __RECCURSION,LAMBDA(_ME,___start,___target,pass,To,From,
                             IF(
                            ___target = ___start,
                            DROP(VSTACK(___start, pass), -1),
                            _ME(
                                _ME,
                                ___start,
                                XLOOKUP(___target, To, From),
                                VSTACK(___target, pass),
                                To,
                                From
                               )
                             )
                         ),
              Sto,CHOOSECOLS(_application,2),
              Sfrom,CHOOSECOLS(_application,4),
              __App,__RECCURSION(__RECCURSION,Source,Target,"",Sto,Sfrom),
              __App

))),
   _out
))
